"""
To run:

luigi --local-scheduler --module ploomber_dag {task-name}
"""
import luigi
from ploomber.spec import DAGSpec

# load ploomber dag
dag = DAGSpec('pipeline.yaml').to_dag().render()


def sanitize_name(task_name):
    """Remove dashes in task names
    """
    return task_name.replace('-', '_')


class PloomberTask(luigi.Task):
    """
    A subclass that converts a ploomber.Task into a luigi.Task
    """
    # the task name in the original ploomber dag
    task_name = None

    def run(self):
        """Runs the ploomber.Task
        """
        dag[self.task_name].build(force=True)

    def output(self):
        """Returns the outputs generated by the ploomber.Task

        Notes
        -----
        Only supports tasks that generate ploomber.products.File, which
        are converted to luigi.LocalTarget
        """
        try:
            return [
                luigi.LocalTarget(path) for path in dag[
                    self.task_name].product.to_json_serializable().values()
            ]
        except AttributeError:
            return luigi.LocalTarget(str(dag[self.task_name].product))

    def requires(self):
        """Returns the upstream dependencies for the task
        """
        g = globals()
        return [
            g[sanitize_name(name)]()
            for name in dag[self.task_name].upstream.keys()
        ]


g = globals()

# iterate over the tasks in the ploomber dag
for name in dag.keys():
    name_ = sanitize_name(name)
    # dynamically create a subclass of PloomberTask and store it in globals
    g[name_] = type(name_, (PloomberTask, ), {"task_name": name})
